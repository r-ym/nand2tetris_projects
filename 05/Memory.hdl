// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    Not(in=address[14], out=notA);
    And(a=notA, b=load, out=loadA);
    RAM16K(in=in, load=loadA, address=address[0..13], out=OUTram);

    Not(in=address[13], out=notb);
    And(a=notb, b=address[14], out=LOADscreen);
    Screen(in=in, load=LOADscreen, address=address[0..12], out=OUTscreen);
    Or8Way(in=address[0..7], out=OUTkbdA);
    Or8Way(in[0..4]=address[8..12], in[5..7]=false, out=OUTkbdB);
    And(a=address[14], b=address[13], out=OUTkbdC);
    Or(a=OUTkbdA, b=OUTkbdB, out=OUTkbdnot);
    Not(in=OUTkbdnot, out=OUTkbdD);
    And(a=OUTkbdD, b=OUTkbdC, out=SELkbd);
    Keyboard(out=OUTkbd);
    Mux16(a=false, b=OUTkbd, sel=SELkbd, out=MUXkbd);
    Or(a=SELkbd, b=LOADscreen, out=SELks);
    Mux16(a=MUXkbd, b=OUTscreen, sel=LOADscreen, out=MUXks);
    Mux16(b=MUXks, a=OUTram, sel=SELks, out=out);

}